"""init schema

Revision ID: 38a9bd18cc53
Revises: 
Create Date: 2025-10-11 17:45:17.146157

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '38a9bd18cc53'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('food_cache',
    sa.Column('food_key', sa.String(length=255), nullable=False),
    sa.Column('json_payload', sa.Text(), nullable=False),
    sa.Column('ttl_until', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('food_key')
    )
    with op.batch_alter_table('food_cache', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_food_cache_ttl_until'), ['ttl_until'], unique=False)

    op.create_table('food_dictionary',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('food_key', sa.String(length=255), nullable=False),
    sa.Column('title_ru', sa.String(length=255), nullable=False),
    sa.Column('category', sa.String(length=64), nullable=True),
    sa.Column('per_100g_kcal', sa.Float(), nullable=True),
    sa.Column('per_100g_p', sa.Float(), nullable=True),
    sa.Column('per_100g_f', sa.Float(), nullable=True),
    sa.Column('per_100g_c', sa.Float(), nullable=True),
    sa.Column('density_g_per_ml', sa.Float(), nullable=True),
    sa.Column('source', sa.Enum('seed', 'api', 'user', name='dict_source_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('per_100g_kcal IS NULL OR per_100g_kcal >= 0', name='chk_dict_kcal_nonneg'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('food_dictionary', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_food_dictionary_food_key'), ['food_key'], unique=True)

    op.create_table('unit_conversions',
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('grams_per_unit', sa.Float(), nullable=False),
    sa.Column('notes', sa.String(length=255), nullable=True),
    sa.CheckConstraint('grams_per_unit > 0', name='chk_units_positive'),
    sa.PrimaryKeyConstraint('unit')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tg_id', sa.Integer(), nullable=False),
    sa.Column('sex', sa.Enum('male', 'female', name='sex_enum'), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('height_cm', sa.Float(), nullable=True),
    sa.Column('weight_kg', sa.Float(), nullable=True),
    sa.Column('goal', sa.Enum('lose', 'maintain', 'gain', name='goal_enum'), nullable=True),
    sa.Column('pal', sa.Float(), nullable=True),
    sa.Column('tz', sa.String(length=64), nullable=False),
    sa.Column('premium_until', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('trial_used', sa.Boolean(), nullable=False),
    sa.Column('trial_activated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('age IS NULL OR (age >= 10 AND age <= 100)', name='chk_users_age_range'),
    sa.CheckConstraint('height_cm IS NULL OR height_cm BETWEEN 100 AND 250', name='chk_users_height'),
    sa.CheckConstraint('weight_kg IS NULL OR weight_kg BETWEEN 30 AND 400', name='chk_users_weight'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('ix_users_is_admin', ['is_admin'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_premium_until'), ['premium_until'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_tg_id'), ['tg_id'], unique=True)

    op.create_table('entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('amount_value', sa.Float(), nullable=False),
    sa.Column('amount_unit', sa.String(length=32), nullable=False),
    sa.Column('amount_grams', sa.Float(), nullable=True),
    sa.Column('kcal', sa.Float(), nullable=True),
    sa.Column('protein', sa.Float(), nullable=True),
    sa.Column('fat', sa.Float(), nullable=True),
    sa.Column('carbs', sa.Float(), nullable=True),
    sa.Column('is_calories_only', sa.Boolean(), nullable=False),
    sa.Column('source', sa.Enum('manual', 'db', 'api', 'custom', name='source_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('amount_grams IS NULL OR amount_grams > 0', name='chk_entries_amount_grams_positive'),
    sa.CheckConstraint('amount_value > 0', name='chk_entries_amount_positive'),
    sa.CheckConstraint('carbs IS NULL OR carbs >= 0', name='chk_entries_c_nonneg'),
    sa.CheckConstraint('fat IS NULL OR fat >= 0', name='chk_entries_f_nonneg'),
    sa.CheckConstraint('kcal IS NULL OR kcal >= 0', name='chk_entries_kcal_nonneg'),
    sa.CheckConstraint('protein IS NULL OR protein >= 0', name='chk_entries_p_nonneg'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('entries', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_entries_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_entries_date'), ['date'], unique=False)
        batch_op.create_index('ix_entries_user_date', ['user_id', 'date'], unique=False)
        batch_op.create_index(batch_op.f('ix_entries_user_id'), ['user_id'], unique=False)

    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=32), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=8), nullable=False),
    sa.Column('status', sa.Enum('pending', 'succeeded', 'canceled', 'failed', name='payment_status_enum'), nullable=False),
    sa.Column('payment_id', sa.String(length=128), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('amount >= 0', name='chk_payment_amount_nonneg'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_payments_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_payments_payment_id'), ['payment_id'], unique=False)
        batch_op.create_index('ix_payments_user_created', ['user_id', 'created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_payments_user_id'), ['user_id'], unique=False)

    op.create_table('user_custom_foods',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('per_100g_kcal', sa.Float(), nullable=True),
    sa.Column('per_100g_p', sa.Float(), nullable=True),
    sa.Column('per_100g_f', sa.Float(), nullable=True),
    sa.Column('per_100g_c', sa.Float(), nullable=True),
    sa.Column('default_unit', sa.String(length=32), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'title', name='uq_user_custom_title')
    )
    with op.batch_alter_table('user_custom_foods', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_custom_foods_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_custom_foods', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_custom_foods_user_id'))

    op.drop_table('user_custom_foods')
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_payments_user_id'))
        batch_op.drop_index('ix_payments_user_created')
        batch_op.drop_index(batch_op.f('ix_payments_payment_id'))
        batch_op.drop_index(batch_op.f('ix_payments_created_at'))

    op.drop_table('payments')
    with op.batch_alter_table('entries', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_entries_user_id'))
        batch_op.drop_index('ix_entries_user_date')
        batch_op.drop_index(batch_op.f('ix_entries_date'))
        batch_op.drop_index(batch_op.f('ix_entries_created_at'))

    op.drop_table('entries')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_tg_id'))
        batch_op.drop_index(batch_op.f('ix_users_premium_until'))
        batch_op.drop_index('ix_users_is_admin')

    op.drop_table('users')
    op.drop_table('unit_conversions')
    with op.batch_alter_table('food_dictionary', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_food_dictionary_food_key'))

    op.drop_table('food_dictionary')
    with op.batch_alter_table('food_cache', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_food_cache_ttl_until'))

    op.drop_table('food_cache')
    # ### end Alembic commands ###
