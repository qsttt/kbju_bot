from __future__ import annotations

import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold

from sqlalchemy import select

from core.db import SessionLocal
from core.models import User
from core.crud import get_daily_summary

from bot.keyboards.main_menu import main_menu_kb, hide_main_menu
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º show_profile
try:
    from bot.handlers.profile import show_profile  # type: ignore
except Exception:  # –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—É—Å–∫–∞
    async def show_profile(msg: Message):
        await msg.answer("–ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


router = Router()
log = logging.getLogger(__name__)


# ============ helpers ============

def _home_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:menu")]]
    )


def _summary_text(total: float | None, p: float | None, f: float | None, c: float | None) -> str:
    lines = ["üìä –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"]
    if total is not None:
        lines.append(f"–ö–∞–ª–æ—Ä–∏–∏: {round(total)} –∫–∫–∞–ª")
    if any(v is not None for v in (p, f, c)):
        lines.append(f"–ë–ñ–£: –ë {round((p or 0), 1)} / –ñ {round((f or 0), 1)} / –£ {round((c or 0), 1)}")
    if len(lines) == 1:
        lines.append("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å –ø—Ä–∏—ë–º –ø–∏—â–∏ —á–µ—Ä–µ–∑ ‚Äò‚ûï –î–æ–±–∞–≤–∏—Ç—å‚Äô.")
    return "\n".join(lines)


# ============ main menu ============

@router.message(CommandStart())
@router.message(Command("menu"))
async def cmd_start(message: Message):
    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu_kb())


@router.callback_query(F.data == "main:menu")
async def cb_main_menu(call: CallbackQuery):
    try:
        await call.message.edit_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º?")
    except Exception:
        pass
    await call.message.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=main_menu_kb())
    await call.answer()


# ============ summary ============

async def _show_summary(message: Message):
    # –≤–Ω—É—Ç—Ä–∏ —ç–∫—Ä–∞–Ω–æ–≤ –ø—Ä—è—á–µ–º —Ä–µ–ø–ª–∞–π-–º–µ–Ω—é
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é —Å–≤–æ–¥–∫—É‚Ä¶", reply_markup=hide_main_menu())
    async with SessionLocal() as session:
        usr = (await session.execute(select(User).where(User.tg_id == message.from_user.id))).scalar_one()
        today_utc = datetime.utcnow().date()
        s = await get_daily_summary(session, usr.id, today_utc)
    txt = _summary_text(s.get("kcal"), s.get("p"), s.get("f"), s.get("c"))
    await message.answer(txt, reply_markup=_home_kb())


@router.message(F.text.in_({"üìä –°–≤–æ–¥–∫–∞", "–°–≤–æ–¥–∫–∞", "—Å–≤–æ–¥–∫–∞"}))
async def msg_summary(message: Message):
    await _show_summary(message)


@router.callback_query(F.data == "menu:summary")
async def cb_summary(call: CallbackQuery):
    await call.answer()
    await _show_summary(call.message)


# ============ premium ============

_PREMIUM_TEXT = (
    "‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º\n\n"
    "‚Ä¢ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä –±–ª—é–¥\n"
    "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –∏ –Ω–µ–¥–µ–ª—è–º\n"
    "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
    "–î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 10 –¥–Ω–µ–π."
)


def _premium_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 10 –¥–Ω–µ–π", callback_data="premium:trial")],
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="premium:buy")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def _show_premium(message: Message):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –ü—Ä–µ–º–∏—É–º‚Ä¶", reply_markup=hide_main_menu())
    await message.answer(_PREMIUM_TEXT, reply_markup=_premium_kb())


@router.message(F.text.in_({"‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º", "–ü—Ä–µ–º–∏—É–º", "–ø—Ä–µ–º–∏—É–º"}))
async def msg_premium(message: Message):
    await _show_premium(message)


@router.callback_query(F.data == "menu:premium")
async def cb_premium(call: CallbackQuery):
    await call.answer()
    await _show_premium(call.message)


@router.callback_query(F.data.in_({"premium:trial", "premium:buy"}))
async def cb_premium_actions(call: CallbackQuery):
    if call.data == "premium:trial":
        await call.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–¥–µ–º–æ)")
    else:
        await call.answer("–ü–æ–∫—É–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–¥–µ–º–æ)")


# ============ profile (entry point) ============

@router.message(F.text.in_({"üë§ –ü—Ä–æ—Ñ–∏–ª—å", "–ü—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∏–ª—å"}))
async def msg_profile(message: Message):
    # —Å–ø—Ä—è—á–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–∫—Ä–æ–µ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶", reply_markup=hide_main_menu())
    await show_profile(message)


@router.callback_query(F.data == "menu:profile")
async def cb_profile(call: CallbackQuery):
    await call.answer()
    await show_profile(call.message)