from __future__ import annotations

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from bot.keyboards.main_menu import main_menu_kb

router = Router()
log = logging.getLogger(__name__)

# --- inline keyboard (–≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –º–æ–¥—É–ª—å) ---
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def premium_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å 10 –¥–Ω–µ–π", callback_data="premium:trial")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="premium:pay")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# --- open premium ---
@router.message(F.text == "‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º")
async def premium_open_msg(message: Message):
    text = (
        "<b>–ü—Ä–µ–º–∏—É–º</b>\n\n"
        "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª—é–¥ –ø–æ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ—Ç—á—ë—Ç—ã –∏ —Ü–µ–ª–∏\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–∞ 10‚Äë–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–±–∞."
    )
    await message.answer(text, reply_markup=ReplyKeyboardRemove(), parse_mode="HTML")
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=premium_kb())


@router.callback_query(F.data == "premium:open")
async def premium_open_cb(call: CallbackQuery):
    text = (
        "<b>–ü—Ä–µ–º–∏—É–º</b>\n\n"
        "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª—é–¥ –ø–æ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ—Ç—á—ë—Ç—ã –∏ —Ü–µ–ª–∏\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–∞ 10‚Äë–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–±–∞."
    )
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=premium_kb())
    except Exception:
        await call.message.answer(text, parse_mode="HTML", reply_markup=premium_kb())
    await call.answer()


@router.callback_query(F.data == "premium:trial")
async def premium_trial(call: CallbackQuery):
    # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    await call.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=False)
    await call.message.edit_text(
        "‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 10 –¥–Ω–µ–π.",
        reply_markup=premium_kb(),
        parse_mode="HTML",
    )


@router.callback_query(F.data == "premium:pay")
async def premium_pay(call: CallbackQuery):
    # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –æ–ø–ª–∞—Ç—ã ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É/–∏–Ω–≤–æ–π—Å
    await call.answer()
    await call.message.edit_text(
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–º–∏—É–º–∞: —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä).",
        reply_markup=premium_kb(),
        parse_mode="HTML",
    )


# --- –≤—ã—Ö–æ–¥ –¥–æ–º–æ–π ---
@router.callback_query(F.data == "main:menu")
async def back_to_main_from_premium(call: CallbackQuery):
    try:
        await call.message.edit_text("–û–∫–µ–π, –≤—ã—Ö–æ–∂—É –≤ –º–µ–Ω—é.")
    except Exception:
        pass
    await call.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu_kb())
    await call.answer()