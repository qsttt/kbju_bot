# File: bot/handlers/profile.py
from __future__ import annotations

import logging
from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select, update

from core.db import async_session_maker
from core.models import User

# –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è
try:
    from bot.keyboards.profile import profile_kb  # type: ignore
except Exception:  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    from aiogram.types import InlineKeyboardMarkup

    def profile_kb(_: Optional[User] = None) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[])

router = Router()
log = logging.getLogger(__name__)


class ProfileStates(StatesGroup):
    waiting_weight = State()
    waiting_height = State()
    waiting_age = State()


async def _get_user(tg_id: int) -> Optional[User]:
    async with async_session_maker() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        return res.scalars().first()


def _profile_text(u: User) -> str:
    parts = ["<b>–ü—Ä–æ—Ñ–∏–ª—å</b>"]
    parts.append(f"–í–µ—Å: <b>{u.weight_kg or '‚Äî'}</b> –∫–≥")
    parts.append(f"–†–æ—Å—Ç: <b>{u.height_cm or '‚Äî'}</b> —Å–º")
    parts.append(f"–í–æ–∑—Ä–∞—Å—Ç: <b>{u.age or '‚Äî'}</b>")
    parts.append(f"–ü–æ–ª: <b>{(u.sex or '‚Äî').upper()}</b>")
    parts.append(f"–¶–µ–ª—å: <b>{u.goal or '‚Äî'}</b>")
    parts.append(f"PAL: <b>{u.pal or '‚Äî'}</b>")
    parts.append(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{u.timezone or '‚Äî'}</b>")
    return "\n".join(parts)


async def _render_profile(message: Message, u: User):
    try:
        kb = profile_kb(u)
    except Exception:
        kb = profile_kb(None)
    await message.answer(_profile_text(u), reply_markup=kb, parse_mode="HTML")


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def open_profile(message: Message, state: FSMContext):
    await state.clear()
    u = await _get_user(message.from_user.id)
    if not u:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    await _render_profile(message, u)


# ===== –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è =====
@router.callback_query(F.data.startswith("prof:"))
async def prof_router(call: CallbackQuery, state: FSMContext):
    data = call.data.split(":")  # –≤–∞—Ä–∏–∞–Ω—Ç—ã: prof:weight / prof:sex:male / prof:goal:loss / prof:pal:1.55 / prof:tz:Europe/Moscow
    action = data[1] if len(data) > 1 else None
    value = ":".join(data[2:]) if len(data) > 2 else None

    u = await _get_user(call.from_user.id)
    if not u:
        await call.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è: –≤–µ—Å/—Ä–æ—Å—Ç/–≤–æ–∑—Ä–∞—Å—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if action in {"weight", "height", "age"} and value is None:
        prompts = {
            "weight": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥), –Ω–∞–ø—Ä–∏–º–µ—Ä: 68",
            "height": "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: 172",
            "age": "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç), –Ω–∞–ø—Ä–∏–º–µ—Ä: 29",
        }
        await call.message.answer(prompts[action])
        await state.set_state(getattr(ProfileStates, f"waiting_{action}"))
        await call.answer()
        return

    # –ü—Ä–µ–¥–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    if action == "sex" and value:
        new_val = value.lower()[:10]
        async with async_session_maker() as session:
            await session.execute(update(User).where(User.id == u.id).values(sex=new_val))
            await session.commit()
        await call.answer("–ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω")
    elif action == "goal" and value:
        new_val = value.lower()[:20]
        async with async_session_maker() as session:
            await session.execute(update(User).where(User.id == u.id).values(goal=new_val))
            await session.commit()
        await call.answer("–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    elif action == "pal" and value:
        try:
            pal = float(value)
        except Exception:
            pal = None
        if pal:
            async with async_session_maker() as session:
                await session.execute(update(User).where(User.id == u.id).values(pal=pal))
                await session.commit()
            await call.answer("PAL –æ–±–Ω–æ–≤–ª—ë–Ω")
        else:
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PAL")
    elif action == "tz" and value:
        new_tz = value[:64]
        async with async_session_maker() as session:
            await session.execute(update(User).where(User.id == u.id).values(timezone=new_tz))
            await session.commit()
        await call.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

    # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    u = await _get_user(call.from_user.id)
    try:
        kb = profile_kb(u)
    except Exception:
        kb = profile_kb(None)
    await call.message.edit_text(_profile_text(u), reply_markup=kb, parse_mode="HTML")


# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ =====
@router.message(ProfileStates.waiting_weight)
async def set_weight(message: Message, state: FSMContext):
    try:
        val = float(message.text.replace(",", "."))
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 68")
        return
    async with async_session_maker() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        u = res.scalars().first()
        if not u:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        u.weight_kg = val
        await session.commit()
    await state.clear()
    await message.answer("–í–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await open_profile(message, state)


@router.message(ProfileStates.waiting_height)
async def set_height(message: Message, state: FSMContext):
    try:
        val = float(message.text.replace(",", "."))
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 172")
        return
    async with async_session_maker() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        u = res.scalars().first()
        if not u:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        u.height_cm = val
        await session.commit()
    await state.clear()
    await message.answer("–†–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await open_profile(message, state)


@router.message(ProfileStates.waiting_age)
async def set_age(message: Message, state: FSMContext):
    try:
        val = int(float(message.text.replace(",", ".")))
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 29")
        return
    async with async_session_maker() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        u = res.scalars().first()
        if not u:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        u.age = val
        await session.commit()
    await state.clear()
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await open_profile(message, state)
