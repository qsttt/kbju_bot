from __future__ import annotations

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Dict


def variants_kb(variants: List[Dict], include_ai: bool = True) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ¬´–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò¬ª."""
    rows: List[List[InlineKeyboardButton]] = []
    for i, v in enumerate(variants[:5]):
        title = v.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        kcal = v.get("kcal100") or 0
        p = v.get("p100") or 0
        f = v.get("f100") or 0
        c = v.get("c100") or 0
        text = f"{title} ‚Äî {kcal:.0f} –∫–∫–∞–ª/100–≥ ¬∑ –ë/–ñ/–£ {p:.1f}/{f:.1f}/{c:.1f}"
        rows.append([InlineKeyboardButton(text=text, callback_data=f"pick:{i}")])

    if include_ai:
        rows.append([InlineKeyboardButton(text="ü§ñ –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò", callback_data="variant:ai")])

    rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def confirm_add_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á—ë—Ç", callback_data="confirm:add")],
            [InlineKeyboardButton(text="üîÅ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="confirm:other")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ]
    )